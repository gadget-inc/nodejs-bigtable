"use strict";
// Copyright 2024 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
// ** This file is automatically generated by gapic-generator-typescript. **
// ** https://github.com/googleapis/gapic-generator-typescript **
// ** All changes to this file may be overwritten. **
Object.defineProperty(exports, "__esModule", { value: true });
exports.BigtableTableAdminClient = void 0;
const jsonProtos = require("../../protos/protos.json");
/**
 * Client JSON configuration object, loaded from
 * `src/v2/bigtable_table_admin_client_config.json`.
 * This file defines retry strategy and timeouts for all API methods in this library.
 */
const gapicConfig = require("./bigtable_table_admin_client_config.json");
const version = require('../../../package.json').version;
/**
 *  Service for creating, configuring, and deleting Cloud Bigtable tables.
 *
 *
 *  Provides access to the table schemas only, not the data stored within
 *  the tables.
 * @class
 * @memberof v2
 */
class BigtableTableAdminClient {
    /**
     * Construct an instance of BigtableTableAdminClient.
     *
     * @param {object} [options] - The configuration object.
     * The options accepted by the constructor are described in detail
     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).
     * The common options are:
     * @param {object} [options.credentials] - Credentials object.
     * @param {string} [options.credentials.client_email]
     * @param {string} [options.credentials.private_key]
     * @param {string} [options.email] - Account email address. Required when
     *     using a .pem or .p12 keyFilename.
     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or
     *     .p12 key downloaded from the Google Developers Console. If you provide
     *     a path to a JSON file, the projectId option below is not necessary.
     *     NOTE: .pem and .p12 require you to specify options.email as well.
     * @param {number} [options.port] - The port on which to connect to
     *     the remote host.
     * @param {string} [options.projectId] - The project ID from the Google
     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check
     *     the environment variable GCLOUD_PROJECT for your project ID. If your
     *     app is running in an environment which supports
     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},
     *     your project ID will be detected automatically.
     * @param {string} [options.apiEndpoint] - The domain name of the
     *     API remote host.
     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.
     *     Follows the structure of {@link gapicConfig}.
     * @param {boolean} [options.fallback] - Use HTTP/1.1 REST mode.
     *     For more information, please check the
     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.
     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you
     *     need to avoid loading the default gRPC version and want to use the fallback
     *     HTTP implementation. Load only fallback version and pass it to the constructor:
     *     ```
     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC
     *     const client = new BigtableTableAdminClient({fallback: true}, gax);
     *     ```
     */
    constructor(opts, gaxInstance) {
        var _a, _b, _c, _d, _e;
        this._terminated = false;
        this.descriptors = {
            page: {},
            stream: {},
            longrunning: {},
            batching: {},
        };
        // Ensure that options include all the required fields.
        const staticMembers = this.constructor;
        if ((opts === null || opts === void 0 ? void 0 : opts.universe_domain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universeDomain) &&
            (opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== (opts === null || opts === void 0 ? void 0 : opts.universeDomain)) {
            throw new Error('Please set either universe_domain or universeDomain, but not both.');
        }
        const universeDomainEnvVar = typeof process === 'object' && typeof process.env === 'object'
            ? process.env['GOOGLE_CLOUD_UNIVERSE_DOMAIN']
            : undefined;
        this._universeDomain =
            (_c = (_b = (_a = opts === null || opts === void 0 ? void 0 : opts.universeDomain) !== null && _a !== void 0 ? _a : opts === null || opts === void 0 ? void 0 : opts.universe_domain) !== null && _b !== void 0 ? _b : universeDomainEnvVar) !== null && _c !== void 0 ? _c : 'googleapis.com';
        this._servicePath = 'bigtableadmin.' + this._universeDomain;
        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || this._servicePath;
        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));
        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;
        const clientConfig = (_d = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _d !== void 0 ? _d : {};
        const fallback = (_e = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _e !== void 0 ? _e : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');
        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);
        // Request numeric enum values if REST transport is used.
        opts.numericEnums = true;
        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.
        if (servicePath !== this._servicePath && !('scopes' in opts)) {
            opts['scopes'] = staticMembers.scopes;
        }
        // Load google-gax module synchronously if needed
        if (!gaxInstance) {
            gaxInstance = require('google-gax');
        }
        // Choose either gRPC or proto-over-HTTP implementation of google-gax.
        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;
        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.
        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);
        // Save options to use in initialize() method.
        this._opts = opts;
        // Save the auth object to the client, for use by other methods.
        this.auth = this._gaxGrpc.auth;
        // Set useJWTAccessWithScope on the auth object.
        this.auth.useJWTAccessWithScope = true;
        // Set defaultServicePath on the auth object.
        this.auth.defaultServicePath = this._servicePath;
        // Set the default scopes in auth client if needed.
        if (servicePath === this._servicePath) {
            this.auth.defaultScopes = staticMembers.scopes;
        }
        // Determine the client header string.
        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];
        if (typeof process === 'object' && 'versions' in process) {
            clientHeader.push(`gl-node/${process.versions.node}`);
        }
        else {
            clientHeader.push(`gl-web/${this._gaxModule.version}`);
        }
        if (!opts.fallback) {
            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);
        }
        else {
            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);
        }
        if (opts.libName && opts.libVersion) {
            clientHeader.push(`${opts.libName}/${opts.libVersion}`);
        }
        // Load the applicable protos.
        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);
        // This API contains "path templates"; forward-slash-separated
        // identifiers to uniquely identify resources within the API.
        // Create useful helper objects for these.
        this.pathTemplates = {
            appProfilePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/appProfiles/{app_profile}'),
            authorizedViewPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/tables/{table}/authorizedViews/{authorized_view}'),
            backupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/clusters/{cluster}/backups/{backup}'),
            clusterPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/clusters/{cluster}'),
            hotTabletPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/clusters/{cluster}/hotTablets/{hot_tablet}'),
            instancePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}'),
            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),
            snapshotPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/clusters/{cluster}/snapshots/{snapshot}'),
            tablePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/instances/{instance}/tables/{table}'),
        };
        // Some of the methods on this service return "paged" results,
        // (e.g. 50 results at a time, with tokens to get subsequent
        // pages). Denote the keys used for pagination and results.
        this.descriptors.page = {
            listTables: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'tables'),
            listAuthorizedViews: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'authorizedViews'),
            listSnapshots: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'snapshots'),
            listBackups: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'backups'),
        };
        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);
        // This API contains "long-running operations", which return a
        // an Operation object that allows for tracking of the operation,
        // rather than holding a request open.
        const lroOptions = {
            auth: this.auth,
            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,
        };
        if (opts.fallback) {
            lroOptions.protoJson = protoFilesRoot;
            lroOptions.httpRules = [
                {
                    selector: 'google.longrunning.Operations.CancelOperation',
                    post: '/v2/{name=operations/**}:cancel',
                },
                {
                    selector: 'google.longrunning.Operations.DeleteOperation',
                    delete: '/v2/{name=operations/**}',
                },
                {
                    selector: 'google.longrunning.Operations.GetOperation',
                    get: '/v2/{name=operations/**}',
                },
                {
                    selector: 'google.longrunning.Operations.ListOperations',
                    get: '/v2/{name=operations/projects/**}/operations',
                },
            ];
        }
        this.operationsClient = this._gaxModule
            .lro(lroOptions)
            .operationsClient(opts);
        const createTableFromSnapshotResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.Table');
        const createTableFromSnapshotMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.CreateTableFromSnapshotMetadata');
        const updateTableResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.Table');
        const updateTableMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.UpdateTableMetadata');
        const undeleteTableResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.Table');
        const undeleteTableMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.UndeleteTableMetadata');
        const createAuthorizedViewResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.AuthorizedView');
        const createAuthorizedViewMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.CreateAuthorizedViewMetadata');
        const updateAuthorizedViewResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.AuthorizedView');
        const updateAuthorizedViewMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.UpdateAuthorizedViewMetadata');
        const snapshotTableResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.Snapshot');
        const snapshotTableMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.SnapshotTableMetadata');
        const createBackupResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.Backup');
        const createBackupMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.CreateBackupMetadata');
        const restoreTableResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.Table');
        const restoreTableMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.RestoreTableMetadata');
        const copyBackupResponse = protoFilesRoot.lookup('.google.bigtable.admin.v2.Backup');
        const copyBackupMetadata = protoFilesRoot.lookup('.google.bigtable.admin.v2.CopyBackupMetadata');
        this.descriptors.longrunning = {
            createTableFromSnapshot: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createTableFromSnapshotResponse.decode.bind(createTableFromSnapshotResponse), createTableFromSnapshotMetadata.decode.bind(createTableFromSnapshotMetadata)),
            updateTable: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateTableResponse.decode.bind(updateTableResponse), updateTableMetadata.decode.bind(updateTableMetadata)),
            undeleteTable: new this._gaxModule.LongrunningDescriptor(this.operationsClient, undeleteTableResponse.decode.bind(undeleteTableResponse), undeleteTableMetadata.decode.bind(undeleteTableMetadata)),
            createAuthorizedView: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createAuthorizedViewResponse.decode.bind(createAuthorizedViewResponse), createAuthorizedViewMetadata.decode.bind(createAuthorizedViewMetadata)),
            updateAuthorizedView: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateAuthorizedViewResponse.decode.bind(updateAuthorizedViewResponse), updateAuthorizedViewMetadata.decode.bind(updateAuthorizedViewMetadata)),
            snapshotTable: new this._gaxModule.LongrunningDescriptor(this.operationsClient, snapshotTableResponse.decode.bind(snapshotTableResponse), snapshotTableMetadata.decode.bind(snapshotTableMetadata)),
            createBackup: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createBackupResponse.decode.bind(createBackupResponse), createBackupMetadata.decode.bind(createBackupMetadata)),
            restoreTable: new this._gaxModule.LongrunningDescriptor(this.operationsClient, restoreTableResponse.decode.bind(restoreTableResponse), restoreTableMetadata.decode.bind(restoreTableMetadata)),
            copyBackup: new this._gaxModule.LongrunningDescriptor(this.operationsClient, copyBackupResponse.decode.bind(copyBackupResponse), copyBackupMetadata.decode.bind(copyBackupMetadata)),
        };
        // Put together the default options sent with requests.
        this._defaults = this._gaxGrpc.constructSettings('google.bigtable.admin.v2.BigtableTableAdmin', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });
        // Set up a dictionary of "inner API calls"; the core implementation
        // of calling the API is handled in `google-gax`, with this code
        // merely providing the destination and request information.
        this.innerApiCalls = {};
        // Add a warn function to the client constructor so it can be easily tested.
        this.warn = this._gaxModule.warn;
    }
    /**
     * Initialize the client.
     * Performs asynchronous operations (such as authentication) and prepares the client.
     * This function will be called automatically when any class method is called for the
     * first time, but if you need to initialize it before calling an actual method,
     * feel free to call initialize() directly.
     *
     * You can await on this method if you want to make sure the client is initialized.
     *
     * @returns {Promise} A promise that resolves to an authenticated service stub.
     */
    initialize() {
        // If the client stub promise is already initialized, return immediately.
        if (this.bigtableTableAdminStub) {
            return this.bigtableTableAdminStub;
        }
        // Put together the "service stub" for
        // google.bigtable.admin.v2.BigtableTableAdmin.
        this.bigtableTableAdminStub = this._gaxGrpc.createStub(this._opts.fallback
            ? this._protos.lookupService('google.bigtable.admin.v2.BigtableTableAdmin')
            : // eslint-disable-next-line @typescript-eslint/no-explicit-any
                this._protos.google.bigtable.admin.v2.BigtableTableAdmin, this._opts, this._providedCustomServicePath);
        // Iterate over each of the methods that the service provides
        // and create an API call method for each.
        const bigtableTableAdminStubMethods = [
            'createTable',
            'createTableFromSnapshot',
            'listTables',
            'getTable',
            'updateTable',
            'deleteTable',
            'undeleteTable',
            'createAuthorizedView',
            'listAuthorizedViews',
            'getAuthorizedView',
            'updateAuthorizedView',
            'deleteAuthorizedView',
            'modifyColumnFamilies',
            'dropRowRange',
            'generateConsistencyToken',
            'checkConsistency',
            'snapshotTable',
            'getSnapshot',
            'listSnapshots',
            'deleteSnapshot',
            'createBackup',
            'getBackup',
            'updateBackup',
            'deleteBackup',
            'listBackups',
            'restoreTable',
            'copyBackup',
            'getIamPolicy',
            'setIamPolicy',
            'testIamPermissions',
        ];
        for (const methodName of bigtableTableAdminStubMethods) {
            const callPromise = this.bigtableTableAdminStub.then(stub => (...args) => {
                if (this._terminated) {
                    return Promise.reject('The client has already been closed.');
                }
                const func = stub[methodName];
                return func.apply(stub, args);
            }, (err) => () => {
                throw err;
            });
            const descriptor = this.descriptors.page[methodName] ||
                this.descriptors.longrunning[methodName] ||
                undefined;
            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);
            this.innerApiCalls[methodName] = apiCall;
        }
        return this.bigtableTableAdminStub;
    }
    /**
     * The DNS address for this API service.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get servicePath() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static servicePath is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'bigtableadmin.googleapis.com';
    }
    /**
     * The DNS address for this API service - same as servicePath.
     * @deprecated Use the apiEndpoint method of the client instance.
     * @returns {string} The DNS address for this service.
     */
    static get apiEndpoint() {
        if (typeof process === 'object' &&
            typeof process.emitWarning === 'function') {
            process.emitWarning('Static apiEndpoint is deprecated, please use the instance method instead.', 'DeprecationWarning');
        }
        return 'bigtableadmin.googleapis.com';
    }
    /**
     * The DNS address for this API service.
     * @returns {string} The DNS address for this service.
     */
    get apiEndpoint() {
        return this._servicePath;
    }
    get universeDomain() {
        return this._universeDomain;
    }
    /**
     * The port for this API service.
     * @returns {number} The default port for this service.
     */
    static get port() {
        return 443;
    }
    /**
     * The scopes needed to make gRPC calls for every method defined
     * in this service.
     * @returns {string[]} List of default scopes.
     */
    static get scopes() {
        return [
            'https://www.googleapis.com/auth/bigtable.admin',
            'https://www.googleapis.com/auth/bigtable.admin.table',
            'https://www.googleapis.com/auth/cloud-bigtable.admin',
            'https://www.googleapis.com/auth/cloud-bigtable.admin.table',
            'https://www.googleapis.com/auth/cloud-platform',
            'https://www.googleapis.com/auth/cloud-platform.read-only',
        ];
    }
    /**
     * Return the project ID used by this class.
     * @returns {Promise} A promise that resolves to string containing the project ID.
     */
    getProjectId(callback) {
        if (callback) {
            this.auth.getProjectId(callback);
            return;
        }
        return this.auth.getProjectId();
    }
    createTable(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createTable(request, options, callback);
    }
    getTable(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getTable(request, options, callback);
    }
    deleteTable(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteTable(request, options, callback);
    }
    getAuthorizedView(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getAuthorizedView(request, options, callback);
    }
    deleteAuthorizedView(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteAuthorizedView(request, options, callback);
    }
    modifyColumnFamilies(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.modifyColumnFamilies(request, options, callback);
    }
    dropRowRange(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.dropRowRange(request, options, callback);
    }
    generateConsistencyToken(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.generateConsistencyToken(request, options, callback);
    }
    checkConsistency(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.checkConsistency(request, options, callback);
    }
    getSnapshot(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getSnapshot(request, options, callback);
    }
    deleteSnapshot(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteSnapshot(request, options, callback);
    }
    getBackup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getBackup(request, options, callback);
    }
    updateBackup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'backup.name': (_a = request.backup.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateBackup(request, options, callback);
    }
    deleteBackup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.deleteBackup(request, options, callback);
    }
    getIamPolicy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                resource: (_a = request.resource) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.getIamPolicy(request, options, callback);
    }
    setIamPolicy(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                resource: (_a = request.resource) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.setIamPolicy(request, options, callback);
    }
    testIamPermissions(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                resource: (_a = request.resource) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.testIamPermissions(request, options, callback);
    }
    createTableFromSnapshot(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createTableFromSnapshot(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createTableFromSnapshot()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.create_table_from_snapshot.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_CreateTableFromSnapshot_async
     */
    async checkCreateTableFromSnapshotProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createTableFromSnapshot, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateTable(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'table.name': (_a = request.table.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateTable(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateTable()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.update_table.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_UpdateTable_async
     */
    async checkUpdateTableProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateTable, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    undeleteTable(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.undeleteTable(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `undeleteTable()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.undelete_table.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_UndeleteTable_async
     */
    async checkUndeleteTableProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.undeleteTable, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createAuthorizedView(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createAuthorizedView(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createAuthorizedView()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.create_authorized_view.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_CreateAuthorizedView_async
     */
    async checkCreateAuthorizedViewProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createAuthorizedView, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    updateAuthorizedView(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                'authorized_view.name': (_a = request.authorizedView.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.updateAuthorizedView(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `updateAuthorizedView()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.update_authorized_view.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_UpdateAuthorizedView_async
     */
    async checkUpdateAuthorizedViewProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateAuthorizedView, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    snapshotTable(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.snapshotTable(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `snapshotTable()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.snapshot_table.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_SnapshotTable_async
     */
    async checkSnapshotTableProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.snapshotTable, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    createBackup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.createBackup(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `createBackup()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.create_backup.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_CreateBackup_async
     */
    async checkCreateBackupProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createBackup, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    restoreTable(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.restoreTable(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `restoreTable()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.restore_table.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_RestoreTable_async
     */
    async checkRestoreTableProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.restoreTable, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    copyBackup(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.copyBackup(request, options, callback);
    }
    /**
     * Check the status of the long running operation returned by `copyBackup()`.
     * @param {String} name
     *   The operation name that will be passed.
     * @returns {Promise} - The promise which resolves to an object.
     *   The decoded operation object has result and metadata field to get information from.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.copy_backup.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_CopyBackup_async
     */
    async checkCopyBackupProgress(name) {
        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });
        const [operation] = await this.operationsClient.getOperation(request);
        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.copyBackup, this._gaxModule.createDefaultBackoffSettings());
        return decodeOperation;
    }
    listTables(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listTables(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the instance for which tables should be
     *   listed. Values are of the form `projects/{project}/instances/{instance}`.
     * @param {google.bigtable.admin.v2.Table.View} request.view
     *   The view to be applied to the returned tables' fields.
     *   NAME_ONLY view (default) and REPLICATION_VIEW are supported.
     * @param {number} request.pageSize
     *   Maximum number of results per page.
     *
     *   A page_size of zero lets the server choose the number of items to return.
     *   A page_size which is strictly positive will return at most that many items.
     *   A negative page_size will cause an error.
     *
     *   Following the first request, subsequent paginated calls are not required
     *   to pass a page_size. If a page_size is set in subsequent calls, it must
     *   match the page_size given in the first request.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.bigtable.admin.v2.Table|Table} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listTablesAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listTablesStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listTables'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTables.createStream(this.innerApiCalls.listTables, request, callSettings);
    }
    /**
     * Equivalent to `listTables`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the instance for which tables should be
     *   listed. Values are of the form `projects/{project}/instances/{instance}`.
     * @param {google.bigtable.admin.v2.Table.View} request.view
     *   The view to be applied to the returned tables' fields.
     *   NAME_ONLY view (default) and REPLICATION_VIEW are supported.
     * @param {number} request.pageSize
     *   Maximum number of results per page.
     *
     *   A page_size of zero lets the server choose the number of items to return.
     *   A page_size which is strictly positive will return at most that many items.
     *   A negative page_size will cause an error.
     *
     *   Following the first request, subsequent paginated calls are not required
     *   to pass a page_size. If a page_size is set in subsequent calls, it must
     *   match the page_size given in the first request.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.bigtable.admin.v2.Table|Table}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.list_tables.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_ListTables_async
     */
    listTablesAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listTables'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listTables.asyncIterate(this.innerApiCalls['listTables'], request, callSettings);
    }
    listAuthorizedViews(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listAuthorizedViews(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the table for which AuthorizedViews should be
     *   listed. Values are of the form
     *   `projects/{project}/instances/{instance}/tables/{table}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of results per page.
     *
     *   A page_size of zero lets the server choose the number of items to return.
     *   A page_size which is strictly positive will return at most that many items.
     *   A negative page_size will cause an error.
     *
     *   Following the first request, subsequent paginated calls are not required
     *   to pass a page_size. If a page_size is set in subsequent calls, it must
     *   match the page_size given in the first request.
     * @param {string} [request.pageToken]
     *   Optional. The value of `next_page_token` returned by a previous call.
     * @param {google.bigtable.admin.v2.AuthorizedView.ResponseView} [request.view]
     *   Optional. The resource_view to be applied to the returned views' fields.
     *   Default to NAME_ONLY.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.bigtable.admin.v2.AuthorizedView|AuthorizedView} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listAuthorizedViewsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listAuthorizedViewsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAuthorizedViews'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAuthorizedViews.createStream(this.innerApiCalls.listAuthorizedViews, request, callSettings);
    }
    /**
     * Equivalent to `listAuthorizedViews`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the table for which AuthorizedViews should be
     *   listed. Values are of the form
     *   `projects/{project}/instances/{instance}/tables/{table}`.
     * @param {number} [request.pageSize]
     *   Optional. Maximum number of results per page.
     *
     *   A page_size of zero lets the server choose the number of items to return.
     *   A page_size which is strictly positive will return at most that many items.
     *   A negative page_size will cause an error.
     *
     *   Following the first request, subsequent paginated calls are not required
     *   to pass a page_size. If a page_size is set in subsequent calls, it must
     *   match the page_size given in the first request.
     * @param {string} [request.pageToken]
     *   Optional. The value of `next_page_token` returned by a previous call.
     * @param {google.bigtable.admin.v2.AuthorizedView.ResponseView} [request.view]
     *   Optional. The resource_view to be applied to the returned views' fields.
     *   Default to NAME_ONLY.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.bigtable.admin.v2.AuthorizedView|AuthorizedView}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.list_authorized_views.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_ListAuthorizedViews_async
     */
    listAuthorizedViewsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listAuthorizedViews'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listAuthorizedViews.asyncIterate(this.innerApiCalls['listAuthorizedViews'], request, callSettings);
    }
    listSnapshots(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listSnapshots(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the cluster for which snapshots should be
     *   listed. Values are of the form
     *   `projects/{project}/instances/{instance}/clusters/{cluster}`.
     *   Use `{cluster} = '-'` to list snapshots for all clusters in an instance,
     *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
     * @param {number} request.pageSize
     *   The maximum number of snapshots to return per page.
     *   CURRENTLY UNIMPLEMENTED AND IGNORED.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.bigtable.admin.v2.Snapshot|Snapshot} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listSnapshotsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listSnapshotsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listSnapshots'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSnapshots.createStream(this.innerApiCalls.listSnapshots, request, callSettings);
    }
    /**
     * Equivalent to `listSnapshots`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The unique name of the cluster for which snapshots should be
     *   listed. Values are of the form
     *   `projects/{project}/instances/{instance}/clusters/{cluster}`.
     *   Use `{cluster} = '-'` to list snapshots for all clusters in an instance,
     *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
     * @param {number} request.pageSize
     *   The maximum number of snapshots to return per page.
     *   CURRENTLY UNIMPLEMENTED AND IGNORED.
     * @param {string} request.pageToken
     *   The value of `next_page_token` returned by a previous call.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.bigtable.admin.v2.Snapshot|Snapshot}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.list_snapshots.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_ListSnapshots_async
     */
    listSnapshotsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listSnapshots'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listSnapshots.asyncIterate(this.innerApiCalls['listSnapshots'], request, callSettings);
    }
    listBackups(request, optionsOrCallback, callback) {
        var _a;
        request = request || {};
        let options;
        if (typeof optionsOrCallback === 'function' && callback === undefined) {
            callback = optionsOrCallback;
            options = {};
        }
        else {
            options = optionsOrCallback;
        }
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        this.initialize();
        return this.innerApiCalls.listBackups(request, options, callback);
    }
    /**
     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The cluster to list backups from.  Values are of the
     *   form `projects/{project}/instances/{instance}/clusters/{cluster}`.
     *   Use `{cluster} = '-'` to list backups for all clusters in an instance,
     *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
     * @param {string} request.filter
     *   A filter expression that filters backups listed in the response.
     *   The expression must specify the field name, a comparison operator,
     *   and the value that you want to use for filtering. The value must be a
     *   string, a number, or a boolean. The comparison operator must be
     *   <, >, <=, >=, !=, =, or :. Colon ':' represents a HAS operator which is
     *   roughly synonymous with equality. Filter rules are case insensitive.
     *
     *   The fields eligible for filtering are:
     *
     *   * `name`
     *   * `source_table`
     *   * `state`
     *   * `start_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *   * `end_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *   * `expire_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *   * `size_bytes`
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. By default, each expression is an AND expression. However,
     *   you can include AND, OR, and NOT expressions explicitly.
     *
     *   Some examples of using filters are:
     *
     *   * `name:"exact"` --> The backup's name is the string "exact".
     *   * `name:howl` --> The backup's name contains the string "howl".
     *   * `source_table:prod`
     *          --> The source_table's name contains the string "prod".
     *   * `state:CREATING` --> The backup is pending creation.
     *   * `state:READY` --> The backup is fully created and ready for use.
     *   * `(name:howl) AND (start_time < \"2018-03-28T14:50:00Z\")`
     *          --> The backup name contains the string "howl" and start_time
     *              of the backup is before 2018-03-28T14:50:00Z.
     *   * `size_bytes > 10000000000` --> The backup's size is greater than 10GB
     * @param {string} request.orderBy
     *   An expression for specifying the sort order of the results of the request.
     *   The string value should specify one or more fields in
     *   {@link protos.google.bigtable.admin.v2.Backup|Backup}. The full syntax is described at
     *   https://aip.dev/132#ordering.
     *
     *   Fields supported are:
     *
     *   * name
     *   * source_table
     *   * expire_time
     *   * start_time
     *   * end_time
     *   * size_bytes
     *   * state
     *
     *   For example, "start_time". The default sorting order is ascending.
     *   To specify descending order for the field, a suffix " desc" should
     *   be appended to the field name. For example, "start_time desc".
     *   Redundant space characters in the syntax are insigificant.
     *
     *   If order_by is empty, results will be sorted by `start_time` in descending
     *   order starting from the most recently created backup.
     * @param {number} request.pageSize
     *   Number of backups to be returned in the response. If 0 or
     *   less, defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link protos.google.bigtable.admin.v2.ListBackupsResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.bigtable.admin.v2.ListBackupsResponse|ListBackupsResponse} to the
     *   same `parent` and with the same `filter`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Stream}
     *   An object stream which emits an object representing {@link protos.google.bigtable.admin.v2.Backup|Backup} on 'data' event.
     *   The client library will perform auto-pagination by default: it will call the API as many
     *   times as needed. Note that it can affect your quota.
     *   We recommend using `listBackupsAsync()`
     *   method described below for async iteration which you can stop as needed.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     */
    listBackupsStream(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listBackups'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBackups.createStream(this.innerApiCalls.listBackups, request, callSettings);
    }
    /**
     * Equivalent to `listBackups`, but returns an iterable object.
     *
     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.
     * @param {Object} request
     *   The request object that will be sent.
     * @param {string} request.parent
     *   Required. The cluster to list backups from.  Values are of the
     *   form `projects/{project}/instances/{instance}/clusters/{cluster}`.
     *   Use `{cluster} = '-'` to list backups for all clusters in an instance,
     *   e.g., `projects/{project}/instances/{instance}/clusters/-`.
     * @param {string} request.filter
     *   A filter expression that filters backups listed in the response.
     *   The expression must specify the field name, a comparison operator,
     *   and the value that you want to use for filtering. The value must be a
     *   string, a number, or a boolean. The comparison operator must be
     *   <, >, <=, >=, !=, =, or :. Colon ':' represents a HAS operator which is
     *   roughly synonymous with equality. Filter rules are case insensitive.
     *
     *   The fields eligible for filtering are:
     *
     *   * `name`
     *   * `source_table`
     *   * `state`
     *   * `start_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *   * `end_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *   * `expire_time` (and values are of the format YYYY-MM-DDTHH:MM:SSZ)
     *   * `size_bytes`
     *
     *   To filter on multiple expressions, provide each separate expression within
     *   parentheses. By default, each expression is an AND expression. However,
     *   you can include AND, OR, and NOT expressions explicitly.
     *
     *   Some examples of using filters are:
     *
     *   * `name:"exact"` --> The backup's name is the string "exact".
     *   * `name:howl` --> The backup's name contains the string "howl".
     *   * `source_table:prod`
     *          --> The source_table's name contains the string "prod".
     *   * `state:CREATING` --> The backup is pending creation.
     *   * `state:READY` --> The backup is fully created and ready for use.
     *   * `(name:howl) AND (start_time < \"2018-03-28T14:50:00Z\")`
     *          --> The backup name contains the string "howl" and start_time
     *              of the backup is before 2018-03-28T14:50:00Z.
     *   * `size_bytes > 10000000000` --> The backup's size is greater than 10GB
     * @param {string} request.orderBy
     *   An expression for specifying the sort order of the results of the request.
     *   The string value should specify one or more fields in
     *   {@link protos.google.bigtable.admin.v2.Backup|Backup}. The full syntax is described at
     *   https://aip.dev/132#ordering.
     *
     *   Fields supported are:
     *
     *   * name
     *   * source_table
     *   * expire_time
     *   * start_time
     *   * end_time
     *   * size_bytes
     *   * state
     *
     *   For example, "start_time". The default sorting order is ascending.
     *   To specify descending order for the field, a suffix " desc" should
     *   be appended to the field name. For example, "start_time desc".
     *   Redundant space characters in the syntax are insigificant.
     *
     *   If order_by is empty, results will be sorted by `start_time` in descending
     *   order starting from the most recently created backup.
     * @param {number} request.pageSize
     *   Number of backups to be returned in the response. If 0 or
     *   less, defaults to the server's maximum allowed page size.
     * @param {string} request.pageToken
     *   If non-empty, `page_token` should contain a
     *   {@link protos.google.bigtable.admin.v2.ListBackupsResponse.next_page_token|next_page_token}
     *   from a previous
     *   {@link protos.google.bigtable.admin.v2.ListBackupsResponse|ListBackupsResponse} to the
     *   same `parent` and with the same `filter`.
     * @param {object} [options]
     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.
     * @returns {Object}
     *   An iterable Object that allows {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | async iteration }.
     *   When you iterate the returned iterable, each element will be an object representing
     *   {@link protos.google.bigtable.admin.v2.Backup|Backup}. The API will be called under the hood as needed, once per the page,
     *   so you can stop the iteration when you don't need more results.
     *   Please see the {@link https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination | documentation }
     *   for more details and examples.
     * @example <caption>include:samples/generated/v2/bigtable_table_admin.list_backups.js</caption>
     * region_tag:bigtableadmin_v2_generated_BigtableTableAdmin_ListBackups_async
     */
    listBackupsAsync(request, options) {
        var _a;
        request = request || {};
        options = options || {};
        options.otherArgs = options.otherArgs || {};
        options.otherArgs.headers = options.otherArgs.headers || {};
        options.otherArgs.headers['x-goog-request-params'] =
            this._gaxModule.routingHeader.fromParams({
                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',
            });
        const defaultCallSettings = this._defaults['listBackups'];
        const callSettings = defaultCallSettings.merge(options);
        this.initialize();
        return this.descriptors.page.listBackups.asyncIterate(this.innerApiCalls['listBackups'], request, callSettings);
    }
    // --------------------
    // -- Path templates --
    // --------------------
    /**
     * Return a fully-qualified appProfile resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} app_profile
     * @returns {string} Resource name string.
     */
    appProfilePath(project, instance, appProfile) {
        return this.pathTemplates.appProfilePathTemplate.render({
            project: project,
            instance: instance,
            app_profile: appProfile,
        });
    }
    /**
     * Parse the project from AppProfile resource.
     *
     * @param {string} appProfileName
     *   A fully-qualified path representing AppProfile resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAppProfileName(appProfileName) {
        return this.pathTemplates.appProfilePathTemplate.match(appProfileName)
            .project;
    }
    /**
     * Parse the instance from AppProfile resource.
     *
     * @param {string} appProfileName
     *   A fully-qualified path representing AppProfile resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromAppProfileName(appProfileName) {
        return this.pathTemplates.appProfilePathTemplate.match(appProfileName)
            .instance;
    }
    /**
     * Parse the app_profile from AppProfile resource.
     *
     * @param {string} appProfileName
     *   A fully-qualified path representing AppProfile resource.
     * @returns {string} A string representing the app_profile.
     */
    matchAppProfileFromAppProfileName(appProfileName) {
        return this.pathTemplates.appProfilePathTemplate.match(appProfileName)
            .app_profile;
    }
    /**
     * Return a fully-qualified authorizedView resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} table
     * @param {string} authorized_view
     * @returns {string} Resource name string.
     */
    authorizedViewPath(project, instance, table, authorizedView) {
        return this.pathTemplates.authorizedViewPathTemplate.render({
            project: project,
            instance: instance,
            table: table,
            authorized_view: authorizedView,
        });
    }
    /**
     * Parse the project from AuthorizedView resource.
     *
     * @param {string} authorizedViewName
     *   A fully-qualified path representing AuthorizedView resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromAuthorizedViewName(authorizedViewName) {
        return this.pathTemplates.authorizedViewPathTemplate.match(authorizedViewName).project;
    }
    /**
     * Parse the instance from AuthorizedView resource.
     *
     * @param {string} authorizedViewName
     *   A fully-qualified path representing AuthorizedView resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromAuthorizedViewName(authorizedViewName) {
        return this.pathTemplates.authorizedViewPathTemplate.match(authorizedViewName).instance;
    }
    /**
     * Parse the table from AuthorizedView resource.
     *
     * @param {string} authorizedViewName
     *   A fully-qualified path representing AuthorizedView resource.
     * @returns {string} A string representing the table.
     */
    matchTableFromAuthorizedViewName(authorizedViewName) {
        return this.pathTemplates.authorizedViewPathTemplate.match(authorizedViewName).table;
    }
    /**
     * Parse the authorized_view from AuthorizedView resource.
     *
     * @param {string} authorizedViewName
     *   A fully-qualified path representing AuthorizedView resource.
     * @returns {string} A string representing the authorized_view.
     */
    matchAuthorizedViewFromAuthorizedViewName(authorizedViewName) {
        return this.pathTemplates.authorizedViewPathTemplate.match(authorizedViewName).authorized_view;
    }
    /**
     * Return a fully-qualified backup resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} cluster
     * @param {string} backup
     * @returns {string} Resource name string.
     */
    backupPath(project, instance, cluster, backup) {
        return this.pathTemplates.backupPathTemplate.render({
            project: project,
            instance: instance,
            cluster: cluster,
            backup: backup,
        });
    }
    /**
     * Parse the project from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromBackupName(backupName) {
        return this.pathTemplates.backupPathTemplate.match(backupName).project;
    }
    /**
     * Parse the instance from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromBackupName(backupName) {
        return this.pathTemplates.backupPathTemplate.match(backupName).instance;
    }
    /**
     * Parse the cluster from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromBackupName(backupName) {
        return this.pathTemplates.backupPathTemplate.match(backupName).cluster;
    }
    /**
     * Parse the backup from Backup resource.
     *
     * @param {string} backupName
     *   A fully-qualified path representing Backup resource.
     * @returns {string} A string representing the backup.
     */
    matchBackupFromBackupName(backupName) {
        return this.pathTemplates.backupPathTemplate.match(backupName).backup;
    }
    /**
     * Return a fully-qualified cluster resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} cluster
     * @returns {string} Resource name string.
     */
    clusterPath(project, instance, cluster) {
        return this.pathTemplates.clusterPathTemplate.render({
            project: project,
            instance: instance,
            cluster: cluster,
        });
    }
    /**
     * Parse the project from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromClusterName(clusterName) {
        return this.pathTemplates.clusterPathTemplate.match(clusterName).project;
    }
    /**
     * Parse the instance from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromClusterName(clusterName) {
        return this.pathTemplates.clusterPathTemplate.match(clusterName).instance;
    }
    /**
     * Parse the cluster from Cluster resource.
     *
     * @param {string} clusterName
     *   A fully-qualified path representing Cluster resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromClusterName(clusterName) {
        return this.pathTemplates.clusterPathTemplate.match(clusterName).cluster;
    }
    /**
     * Return a fully-qualified hotTablet resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} cluster
     * @param {string} hot_tablet
     * @returns {string} Resource name string.
     */
    hotTabletPath(project, instance, cluster, hotTablet) {
        return this.pathTemplates.hotTabletPathTemplate.render({
            project: project,
            instance: instance,
            cluster: cluster,
            hot_tablet: hotTablet,
        });
    }
    /**
     * Parse the project from HotTablet resource.
     *
     * @param {string} hotTabletName
     *   A fully-qualified path representing HotTablet resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromHotTabletName(hotTabletName) {
        return this.pathTemplates.hotTabletPathTemplate.match(hotTabletName)
            .project;
    }
    /**
     * Parse the instance from HotTablet resource.
     *
     * @param {string} hotTabletName
     *   A fully-qualified path representing HotTablet resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromHotTabletName(hotTabletName) {
        return this.pathTemplates.hotTabletPathTemplate.match(hotTabletName)
            .instance;
    }
    /**
     * Parse the cluster from HotTablet resource.
     *
     * @param {string} hotTabletName
     *   A fully-qualified path representing HotTablet resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromHotTabletName(hotTabletName) {
        return this.pathTemplates.hotTabletPathTemplate.match(hotTabletName)
            .cluster;
    }
    /**
     * Parse the hot_tablet from HotTablet resource.
     *
     * @param {string} hotTabletName
     *   A fully-qualified path representing HotTablet resource.
     * @returns {string} A string representing the hot_tablet.
     */
    matchHotTabletFromHotTabletName(hotTabletName) {
        return this.pathTemplates.hotTabletPathTemplate.match(hotTabletName)
            .hot_tablet;
    }
    /**
     * Return a fully-qualified instance resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @returns {string} Resource name string.
     */
    instancePath(project, instance) {
        return this.pathTemplates.instancePathTemplate.render({
            project: project,
            instance: instance,
        });
    }
    /**
     * Parse the project from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromInstanceName(instanceName) {
        return this.pathTemplates.instancePathTemplate.match(instanceName).project;
    }
    /**
     * Parse the instance from Instance resource.
     *
     * @param {string} instanceName
     *   A fully-qualified path representing Instance resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromInstanceName(instanceName) {
        return this.pathTemplates.instancePathTemplate.match(instanceName).instance;
    }
    /**
     * Return a fully-qualified project resource name string.
     *
     * @param {string} project
     * @returns {string} Resource name string.
     */
    projectPath(project) {
        return this.pathTemplates.projectPathTemplate.render({
            project: project,
        });
    }
    /**
     * Parse the project from Project resource.
     *
     * @param {string} projectName
     *   A fully-qualified path representing Project resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromProjectName(projectName) {
        return this.pathTemplates.projectPathTemplate.match(projectName).project;
    }
    /**
     * Return a fully-qualified snapshot resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} cluster
     * @param {string} snapshot
     * @returns {string} Resource name string.
     */
    snapshotPath(project, instance, cluster, snapshot) {
        return this.pathTemplates.snapshotPathTemplate.render({
            project: project,
            instance: instance,
            cluster: cluster,
            snapshot: snapshot,
        });
    }
    /**
     * Parse the project from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromSnapshotName(snapshotName) {
        return this.pathTemplates.snapshotPathTemplate.match(snapshotName).project;
    }
    /**
     * Parse the instance from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromSnapshotName(snapshotName) {
        return this.pathTemplates.snapshotPathTemplate.match(snapshotName).instance;
    }
    /**
     * Parse the cluster from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the cluster.
     */
    matchClusterFromSnapshotName(snapshotName) {
        return this.pathTemplates.snapshotPathTemplate.match(snapshotName).cluster;
    }
    /**
     * Parse the snapshot from Snapshot resource.
     *
     * @param {string} snapshotName
     *   A fully-qualified path representing Snapshot resource.
     * @returns {string} A string representing the snapshot.
     */
    matchSnapshotFromSnapshotName(snapshotName) {
        return this.pathTemplates.snapshotPathTemplate.match(snapshotName).snapshot;
    }
    /**
     * Return a fully-qualified table resource name string.
     *
     * @param {string} project
     * @param {string} instance
     * @param {string} table
     * @returns {string} Resource name string.
     */
    tablePath(project, instance, table) {
        return this.pathTemplates.tablePathTemplate.render({
            project: project,
            instance: instance,
            table: table,
        });
    }
    /**
     * Parse the project from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the project.
     */
    matchProjectFromTableName(tableName) {
        return this.pathTemplates.tablePathTemplate.match(tableName).project;
    }
    /**
     * Parse the instance from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the instance.
     */
    matchInstanceFromTableName(tableName) {
        return this.pathTemplates.tablePathTemplate.match(tableName).instance;
    }
    /**
     * Parse the table from Table resource.
     *
     * @param {string} tableName
     *   A fully-qualified path representing Table resource.
     * @returns {string} A string representing the table.
     */
    matchTableFromTableName(tableName) {
        return this.pathTemplates.tablePathTemplate.match(tableName).table;
    }
    /**
     * Terminate the gRPC channel and close the client.
     *
     * The client will no longer be usable and all future behavior is undefined.
     * @returns {Promise} A promise that resolves when the client is closed.
     */
    close() {
        if (this.bigtableTableAdminStub && !this._terminated) {
            return this.bigtableTableAdminStub.then(stub => {
                this._terminated = true;
                stub.close();
                this.operationsClient.close();
            });
        }
        return Promise.resolve();
    }
}
exports.BigtableTableAdminClient = BigtableTableAdminClient;
//# sourceMappingURL=bigtable_table_admin_client.js.map